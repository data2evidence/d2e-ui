{
  "atlasId": [5902, 5903, 5904, 8406, 8407],
  "cohortId": [1, 2, 3, 4, 5],
  "cohortName": ["Celecoxib", "Diclofenac", "GI bleed", "Celecoxib age 30 or older", "Diclofenac age 30 or older"],
  "logicDescription": [null, "Diclofenac", null, null, "Diclofenac"],
  "generateStats": [true, true, true, true, true],
  "json": ["{\n\t\"cdmVersionRange\" : \">=5.0.0\",\n\t\"PrimaryCriteria\" : {\n\t\t\"CriteriaList\" : [\n\t\t\t{\n\t\t\t\t\"DrugEra\" : {\n\t\t\t\t\t\"CodesetId\" : 0\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"ObservationWindow\" : {\n\t\t\t\"PriorDays\" : 0,\n\t\t\t\"PostDays\" : 0\n\t\t},\n\t\t\"PrimaryCriteriaLimit\" : {\n\t\t\t\"Type\" : \"First\"\n\t\t}\n\t},\n\t\"ConceptSets\" : [\n\t\t{\n\t\t\t\"id\" : 0,\n\t\t\t\"name\" : \"Celecoxib\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"items\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"concept\" : {\n\t\t\t\t\t\t\t\"CONCEPT_ID\" : 1118084,\n\t\t\t\t\t\t\t\"CONCEPT_NAME\" : \"celecoxib\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT\" : \"S\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT_CAPTION\" : \"Standard\",\n\t\t\t\t\t\t\t\"INVALID_REASON\" : \"V\",\n\t\t\t\t\t\t\t\"INVALID_REASON_CAPTION\" : \"Valid\",\n\t\t\t\t\t\t\t\"CONCEPT_CODE\" : \"140587\",\n\t\t\t\t\t\t\t\"DOMAIN_ID\" : \"Drug\",\n\t\t\t\t\t\t\t\"VOCABULARY_ID\" : \"RxNorm\",\n\t\t\t\t\t\t\t\"CONCEPT_CLASS_ID\" : \"Ingredient\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"isExcluded\" : false,\n\t\t\t\t\t\t\"includeDescendants\" : false,\n\t\t\t\t\t\t\"includeMapped\" : false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"QualifiedLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"ExpressionLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"InclusionRules\" : [],\n\t\"EndStrategy\" : {\n\t\t\"CustomEra\" : {\n\t\t\t\"DrugCodesetId\" : 0,\n\t\t\t\"GapDays\" : 30,\n\t\t\t\"Offset\" : 0\n\t\t}\n\t},\n\t\"CensoringCriteria\" : [],\n\t\"CollapseSettings\" : {\n\t\t\"CollapseType\" : \"ERA\",\n\t\t\"EraPad\" : 0\n\t},\n\t\"CensorWindow\" : {}\n}", "{\n\t\"cdmVersionRange\" : \">=5.0.0\",\n\t\"PrimaryCriteria\" : {\n\t\t\"CriteriaList\" : [\n\t\t\t{\n\t\t\t\t\"DrugEra\" : {\n\t\t\t\t\t\"CodesetId\" : 0\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"ObservationWindow\" : {\n\t\t\t\"PriorDays\" : 0,\n\t\t\t\"PostDays\" : 0\n\t\t},\n\t\t\"PrimaryCriteriaLimit\" : {\n\t\t\t\"Type\" : \"First\"\n\t\t}\n\t},\n\t\"ConceptSets\" : [\n\t\t{\n\t\t\t\"id\" : 0,\n\t\t\t\"name\" : \"Diclofenac\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"items\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"concept\" : {\n\t\t\t\t\t\t\t\"CONCEPT_ID\" : 1124300,\n\t\t\t\t\t\t\t\"CONCEPT_NAME\" : \"diclofenac\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT\" : \"S\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT_CAPTION\" : \"Standard\",\n\t\t\t\t\t\t\t\"INVALID_REASON\" : \"V\",\n\t\t\t\t\t\t\t\"INVALID_REASON_CAPTION\" : \"Valid\",\n\t\t\t\t\t\t\t\"CONCEPT_CODE\" : \"3355\",\n\t\t\t\t\t\t\t\"DOMAIN_ID\" : \"Drug\",\n\t\t\t\t\t\t\t\"VOCABULARY_ID\" : \"RxNorm\",\n\t\t\t\t\t\t\t\"CONCEPT_CLASS_ID\" : \"Ingredient\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"isExcluded\" : false,\n\t\t\t\t\t\t\"includeDescendants\" : false,\n\t\t\t\t\t\t\"includeMapped\" : false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"QualifiedLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"ExpressionLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"InclusionRules\" : [],\n\t\"EndStrategy\" : {\n\t\t\"CustomEra\" : {\n\t\t\t\"DrugCodesetId\" : 0,\n\t\t\t\"GapDays\" : 30,\n\t\t\t\"Offset\" : 0\n\t\t}\n\t},\n\t\"CensoringCriteria\" : [],\n\t\"CollapseSettings\" : {\n\t\t\"CollapseType\" : \"ERA\",\n\t\t\"EraPad\" : 0\n\t},\n\t\"CensorWindow\" : {}\n}", "{\n\t\"cdmVersionRange\" : \">=5.0.0\",\n\t\"PrimaryCriteria\" : {\n\t\t\"CriteriaList\" : [\n\t\t\t{\n\t\t\t\t\"ConditionOccurrence\" : {\n\t\t\t\t\t\"CodesetId\" : 0,\n\t\t\t\t\t\"ConditionTypeExclude\" : false\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"ObservationWindow\" : {\n\t\t\t\"PriorDays\" : 0,\n\t\t\t\"PostDays\" : 0\n\t\t},\n\t\t\"PrimaryCriteriaLimit\" : {\n\t\t\t\"Type\" : \"All\"\n\t\t}\n\t},\n\t\"ConceptSets\" : [\n\t\t{\n\t\t\t\"id\" : 0,\n\t\t\t\"name\" : \"GI bleed\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"items\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"concept\" : {\n\t\t\t\t\t\t\t\"CONCEPT_ID\" : 192671,\n\t\t\t\t\t\t\t\"CONCEPT_NAME\" : \"Gastrointestinal hemorrhage\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT\" : \"S\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT_CAPTION\" : \"Standard\",\n\t\t\t\t\t\t\t\"INVALID_REASON\" : \"V\",\n\t\t\t\t\t\t\t\"INVALID_REASON_CAPTION\" : \"Valid\",\n\t\t\t\t\t\t\t\"CONCEPT_CODE\" : \"74474003\",\n\t\t\t\t\t\t\t\"DOMAIN_ID\" : \"Condition\",\n\t\t\t\t\t\t\t\"VOCABULARY_ID\" : \"SNOMED\",\n\t\t\t\t\t\t\t\"CONCEPT_CLASS_ID\" : \"Clinical Finding\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"isExcluded\" : false,\n\t\t\t\t\t\t\"includeDescendants\" : true,\n\t\t\t\t\t\t\"includeMapped\" : false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"QualifiedLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"ExpressionLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"InclusionRules\" : [],\n\t\"EndStrategy\" : {\n\t\t\"DateOffset\" : {\n\t\t\t\"DateField\" : \"StartDate\",\n\t\t\t\"Offset\" : 0\n\t\t}\n\t},\n\t\"CensoringCriteria\" : [],\n\t\"CollapseSettings\" : {\n\t\t\"CollapseType\" : \"ERA\",\n\t\t\"EraPad\" : 0\n\t},\n\t\"CensorWindow\" : {}\n}", "{\n\t\"cdmVersionRange\" : \">=5.0.0\",\n\t\"PrimaryCriteria\" : {\n\t\t\"CriteriaList\" : [\n\t\t\t{\n\t\t\t\t\"DrugEra\" : {\n\t\t\t\t\t\"CodesetId\" : 0\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"ObservationWindow\" : {\n\t\t\t\"PriorDays\" : 0,\n\t\t\t\"PostDays\" : 0\n\t\t},\n\t\t\"PrimaryCriteriaLimit\" : {\n\t\t\t\"Type\" : \"First\"\n\t\t}\n\t},\n\t\"ConceptSets\" : [\n\t\t{\n\t\t\t\"id\" : 0,\n\t\t\t\"name\" : \"Celecoxib\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"items\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"concept\" : {\n\t\t\t\t\t\t\t\"CONCEPT_ID\" : 1118084,\n\t\t\t\t\t\t\t\"CONCEPT_NAME\" : \"celecoxib\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT\" : \"S\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT_CAPTION\" : \"Standard\",\n\t\t\t\t\t\t\t\"INVALID_REASON\" : \"V\",\n\t\t\t\t\t\t\t\"INVALID_REASON_CAPTION\" : \"Valid\",\n\t\t\t\t\t\t\t\"CONCEPT_CODE\" : \"140587\",\n\t\t\t\t\t\t\t\"DOMAIN_ID\" : \"Drug\",\n\t\t\t\t\t\t\t\"VOCABULARY_ID\" : \"RxNorm\",\n\t\t\t\t\t\t\t\"CONCEPT_CLASS_ID\" : \"Ingredient\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"isExcluded\" : false,\n\t\t\t\t\t\t\"includeDescendants\" : false,\n\t\t\t\t\t\t\"includeMapped\" : false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"QualifiedLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"ExpressionLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"InclusionRules\" : [\n\t\t{\n\t\t\t\"name\" : \"Age >= 30\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"Type\" : \"ALL\",\n\t\t\t\t\"CriteriaList\" : [],\n\t\t\t\t\"DemographicCriteriaList\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Age\" : {\n\t\t\t\t\t\t\t\"Value\" : 30,\n\t\t\t\t\t\t\t\"Op\" : \"gte\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Groups\" : []\n\t\t\t}\n\t\t}\n\t],\n\t\"EndStrategy\" : {\n\t\t\"CustomEra\" : {\n\t\t\t\"DrugCodesetId\" : 0,\n\t\t\t\"GapDays\" : 30,\n\t\t\t\"Offset\" : 0\n\t\t}\n\t},\n\t\"CensoringCriteria\" : [],\n\t\"CollapseSettings\" : {\n\t\t\"CollapseType\" : \"ERA\",\n\t\t\"EraPad\" : 0\n\t},\n\t\"CensorWindow\" : {}\n}", "{\n\t\"cdmVersionRange\" : \">=5.0.0\",\n\t\"PrimaryCriteria\" : {\n\t\t\"CriteriaList\" : [\n\t\t\t{\n\t\t\t\t\"DrugEra\" : {\n\t\t\t\t\t\"CodesetId\" : 0\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"ObservationWindow\" : {\n\t\t\t\"PriorDays\" : 0,\n\t\t\t\"PostDays\" : 0\n\t\t},\n\t\t\"PrimaryCriteriaLimit\" : {\n\t\t\t\"Type\" : \"First\"\n\t\t}\n\t},\n\t\"ConceptSets\" : [\n\t\t{\n\t\t\t\"id\" : 0,\n\t\t\t\"name\" : \"Diclofenac\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"items\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"concept\" : {\n\t\t\t\t\t\t\t\"CONCEPT_ID\" : 1124300,\n\t\t\t\t\t\t\t\"CONCEPT_NAME\" : \"diclofenac\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT\" : \"S\",\n\t\t\t\t\t\t\t\"STANDARD_CONCEPT_CAPTION\" : \"Standard\",\n\t\t\t\t\t\t\t\"INVALID_REASON\" : \"V\",\n\t\t\t\t\t\t\t\"INVALID_REASON_CAPTION\" : \"Valid\",\n\t\t\t\t\t\t\t\"CONCEPT_CODE\" : \"3355\",\n\t\t\t\t\t\t\t\"DOMAIN_ID\" : \"Drug\",\n\t\t\t\t\t\t\t\"VOCABULARY_ID\" : \"RxNorm\",\n\t\t\t\t\t\t\t\"CONCEPT_CLASS_ID\" : \"Ingredient\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"isExcluded\" : false,\n\t\t\t\t\t\t\"includeDescendants\" : false,\n\t\t\t\t\t\t\"includeMapped\" : false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t],\n\t\"QualifiedLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"ExpressionLimit\" : {\n\t\t\"Type\" : \"First\"\n\t},\n\t\"InclusionRules\" : [\n\t\t{\n\t\t\t\"name\" : \"Age >= 30\",\n\t\t\t\"expression\" : {\n\t\t\t\t\"Type\" : \"ALL\",\n\t\t\t\t\"CriteriaList\" : [],\n\t\t\t\t\"DemographicCriteriaList\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Age\" : {\n\t\t\t\t\t\t\t\"Value\" : 30,\n\t\t\t\t\t\t\t\"Op\" : \"gte\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Groups\" : []\n\t\t\t}\n\t\t}\n\t],\n\t\"EndStrategy\" : {\n\t\t\"CustomEra\" : {\n\t\t\t\"DrugCodesetId\" : 0,\n\t\t\t\"GapDays\" : 30,\n\t\t\t\"Offset\" : 0\n\t\t}\n\t},\n\t\"CensoringCriteria\" : [],\n\t\"CollapseSettings\" : {\n\t\t\"CollapseType\" : \"ERA\",\n\t\t\"EraPad\" : 0\n\t},\n\t\"CensorWindow\" : {}\n}"],
  "sql": ["CREATE TABLE #Codesets (\n  codeset_id int NOT NULL,\n  concept_id bigint NOT NULL\n)\n;\n\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\n( \n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1118084)\n\n) I\n) C\n;\n\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\nINTO #qualified_events\nFROM \n(\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM (-- Begin Primary Events\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\nFROM\n(\n  select E.person_id, E.start_date, E.end_date,\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM \n  (\n  -- Begin Drug Era Criteria\nselect C.person_id, C.drug_era_id as event_id, C.drug_era_start_date as start_date, C.drug_era_end_date as end_date,\n    CAST(NULL as bigint) as visit_occurrence_id,C.drug_era_start_date as sort_date\nfrom \n(\n  select de.* \n  FROM @cdm_database_schema.DRUG_ERA de\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\n) C\n\n\n-- End Drug Era Criteria\n\n  ) E\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\n) P\nWHERE P.ordinal = 1\n-- End Primary Events\n) pe\n  \n) QE\n\n;\n\n--- Inclusion Rule Inserts\n\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\n\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\ninto #included_events\nFROM (\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\n  from\n  (\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\n    from #qualified_events Q\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\n  ) MG -- matching groups\n{0 != 0}?{\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\n}\n) Results\nWHERE Results.ordinal = 1\n;\n\n-- custom era strategy\n\nwith ctePersons(person_id) as (\n\tselect distinct person_id from #included_events\n)\n\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\nINTO #drugTarget\nFROM (\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\n\n\tUNION ALL\n\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\n) E\n;\n\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\nINTO #strategy_ends\nfrom #included_events et\nJOIN \n(\n  select ENDS.person_id, min(drug_exposure_start_date) as era_start_date, DATEADD(day,0, ENDS.era_end_date) as era_end_date\n  from\n  (\n    select de.person_id, de.drug_exposure_start_date, MIN(e.END_DATE) as era_end_date\n    FROM #drugTarget DE\n    JOIN \n    (\n      --cteEndDates\n      select PERSON_ID, DATEADD(day,-1 * 30,EVENT_DATE) as END_DATE -- unpad the end date by 30\n      FROM\n      (\n\t\t\t\tselect PERSON_ID, EVENT_DATE, EVENT_TYPE, \n\t\t\t\tMAX(START_ORDINAL) OVER (PARTITION BY PERSON_ID ORDER BY event_date, event_type, START_ORDINAL ROWS UNBOUNDED PRECEDING) AS start_ordinal,\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY EVENT_DATE, EVENT_TYPE, START_ORDINAL) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n\t\t\t\tfrom\n\t\t\t\t(\n\t\t\t\t\t-- select the start dates, assigning a row number to each\n\t\t\t\t\tSelect PERSON_ID, DRUG_EXPOSURE_START_DATE AS EVENT_DATE, 0 as EVENT_TYPE, ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY DRUG_EXPOSURE_START_DATE) as START_ORDINAL\n\t\t\t\t\tfrom #drugTarget D\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\t-- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\n\t\t\t\t\tselect PERSON_ID, DATEADD(day,30,DRUG_EXPOSURE_END_DATE), 1 as EVENT_TYPE, NULL\n\t\t\t\t\tFROM #drugTarget D\n\t\t\t\t) RAWDATA\n      ) E\n      WHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\n    ) E on DE.PERSON_ID = E.PERSON_ID and E.END_DATE >= DE.DRUG_EXPOSURE_START_DATE\n    GROUP BY de.person_id, de.drug_exposure_start_date\n  ) ENDS\n  GROUP BY ENDS.person_id, ENDS.era_end_date\n) ERAS on ERAS.person_id = et.person_id \nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\n\nTRUNCATE TABLE #drugTarget;\nDROP TABLE #drugTarget;\n\n\n-- generate cohort periods into #final_cohort\nselect person_id, start_date, end_date\nINTO #cohort_rows\nfrom ( -- first_ends\n\tselect F.person_id, F.start_date, F.end_date\n\tFROM (\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\n\t  from #included_events I\n\t  join ( -- cohort_ends\n-- cohort exit dates\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\n\t) F\n\tWHERE F.ordinal = 1\n) FE;\n\nselect person_id, min(start_date) as start_date, end_date\ninto #final_cohort\nfrom ( --cteEnds\n\tSELECT\n\t\t c.person_id\n\t\t, c.start_date\n\t\t, MIN(ed.end_date) AS end_date\n\tFROM #cohort_rows c\n\tJOIN ( -- cteEndDates\n    SELECT\n      person_id\n      , DATEADD(day,-1 * 0, event_date)  as end_date\n    FROM\n    (\n      SELECT\n        person_id\n        , event_date\n        , event_type\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\n      FROM\n      (\n        SELECT\n          person_id\n          , start_date AS event_date\n          , -1 AS event_type\n        FROM #cohort_rows\n\n        UNION ALL\n\n\n        SELECT\n          person_id\n          , DATEADD(day,0,end_date) as end_date\n          , 1 AS event_type\n        FROM #cohort_rows\n      ) RAWDATA\n    ) e\n    WHERE interval_status = 0\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\n\tGROUP BY c.person_id, c.start_date\n) e\ngroup by person_id, end_date\n;\n\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\n;\n\n{0 != 0}?{\n-- BEGIN: Censored Stats\n\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\n\n-- END: Censored Stats\n}\n{0 != 0 & 0 != 0}?{\n\nCREATE TABLE #inclusion_rules (rule_sequence int);\n\n-- Find the event that is the 'best match' per person.  \n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\n\nselect q.person_id, q.event_id\ninto #best_events\nfrom #qualified_events Q\njoin (\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\n\tFROM (\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\n\t\tFROM #qualified_events Q\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\n\t) R\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\nWHERE ranked.rank_value = 1\n;\n\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\n-- 0: all events\n-- 1: best event\n\n\n-- BEGIN: Inclusion Impact Analysis - event\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #qualified_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #qualified_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\nFROM\n(select count_big(event_id) as total from #qualified_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - event\n\n-- BEGIN: Inclusion Impact Analysis - person\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #best_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #best_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\nFROM\n(select count_big(event_id) as total from #best_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - person\n\nTRUNCATE TABLE #best_events;\nDROP TABLE #best_events;\n\nTRUNCATE TABLE #inclusion_rules;\nDROP TABLE #inclusion_rules;\n}\n\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\n\nTRUNCATE TABLE #cohort_rows;\nDROP TABLE #cohort_rows;\n\nTRUNCATE TABLE #final_cohort;\nDROP TABLE #final_cohort;\n\nTRUNCATE TABLE #inclusion_events;\nDROP TABLE #inclusion_events;\n\nTRUNCATE TABLE #qualified_events;\nDROP TABLE #qualified_events;\n\nTRUNCATE TABLE #included_events;\nDROP TABLE #included_events;\n\nTRUNCATE TABLE #Codesets;\nDROP TABLE #Codesets;\n", "CREATE TABLE #Codesets (\n  codeset_id int NOT NULL,\n  concept_id bigint NOT NULL\n)\n;\n\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\n( \n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1124300)\n\n) I\n) C\n;\n\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\nINTO #qualified_events\nFROM \n(\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM (-- Begin Primary Events\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\nFROM\n(\n  select E.person_id, E.start_date, E.end_date,\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM \n  (\n  -- Begin Drug Era Criteria\nselect C.person_id, C.drug_era_id as event_id, C.drug_era_start_date as start_date, C.drug_era_end_date as end_date,\n    CAST(NULL as bigint) as visit_occurrence_id,C.drug_era_start_date as sort_date\nfrom \n(\n  select de.* \n  FROM @cdm_database_schema.DRUG_ERA de\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\n) C\n\n\n-- End Drug Era Criteria\n\n  ) E\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\n) P\nWHERE P.ordinal = 1\n-- End Primary Events\n) pe\n  \n) QE\n\n;\n\n--- Inclusion Rule Inserts\n\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\n\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\ninto #included_events\nFROM (\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\n  from\n  (\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\n    from #qualified_events Q\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\n  ) MG -- matching groups\n{0 != 0}?{\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\n}\n) Results\nWHERE Results.ordinal = 1\n;\n\n-- custom era strategy\n\nwith ctePersons(person_id) as (\n\tselect distinct person_id from #included_events\n)\n\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\nINTO #drugTarget\nFROM (\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\n\n\tUNION ALL\n\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\n) E\n;\n\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\nINTO #strategy_ends\nfrom #included_events et\nJOIN \n(\n  select ENDS.person_id, min(drug_exposure_start_date) as era_start_date, DATEADD(day,0, ENDS.era_end_date) as era_end_date\n  from\n  (\n    select de.person_id, de.drug_exposure_start_date, MIN(e.END_DATE) as era_end_date\n    FROM #drugTarget DE\n    JOIN \n    (\n      --cteEndDates\n      select PERSON_ID, DATEADD(day,-1 * 30,EVENT_DATE) as END_DATE -- unpad the end date by 30\n      FROM\n      (\n\t\t\t\tselect PERSON_ID, EVENT_DATE, EVENT_TYPE, \n\t\t\t\tMAX(START_ORDINAL) OVER (PARTITION BY PERSON_ID ORDER BY event_date, event_type, START_ORDINAL ROWS UNBOUNDED PRECEDING) AS start_ordinal,\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY EVENT_DATE, EVENT_TYPE, START_ORDINAL) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n\t\t\t\tfrom\n\t\t\t\t(\n\t\t\t\t\t-- select the start dates, assigning a row number to each\n\t\t\t\t\tSelect PERSON_ID, DRUG_EXPOSURE_START_DATE AS EVENT_DATE, 0 as EVENT_TYPE, ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY DRUG_EXPOSURE_START_DATE) as START_ORDINAL\n\t\t\t\t\tfrom #drugTarget D\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\t-- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\n\t\t\t\t\tselect PERSON_ID, DATEADD(day,30,DRUG_EXPOSURE_END_DATE), 1 as EVENT_TYPE, NULL\n\t\t\t\t\tFROM #drugTarget D\n\t\t\t\t) RAWDATA\n      ) E\n      WHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\n    ) E on DE.PERSON_ID = E.PERSON_ID and E.END_DATE >= DE.DRUG_EXPOSURE_START_DATE\n    GROUP BY de.person_id, de.drug_exposure_start_date\n  ) ENDS\n  GROUP BY ENDS.person_id, ENDS.era_end_date\n) ERAS on ERAS.person_id = et.person_id \nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\n\nTRUNCATE TABLE #drugTarget;\nDROP TABLE #drugTarget;\n\n\n-- generate cohort periods into #final_cohort\nselect person_id, start_date, end_date\nINTO #cohort_rows\nfrom ( -- first_ends\n\tselect F.person_id, F.start_date, F.end_date\n\tFROM (\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\n\t  from #included_events I\n\t  join ( -- cohort_ends\n-- cohort exit dates\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\n\t) F\n\tWHERE F.ordinal = 1\n) FE;\n\nselect person_id, min(start_date) as start_date, end_date\ninto #final_cohort\nfrom ( --cteEnds\n\tSELECT\n\t\t c.person_id\n\t\t, c.start_date\n\t\t, MIN(ed.end_date) AS end_date\n\tFROM #cohort_rows c\n\tJOIN ( -- cteEndDates\n    SELECT\n      person_id\n      , DATEADD(day,-1 * 0, event_date)  as end_date\n    FROM\n    (\n      SELECT\n        person_id\n        , event_date\n        , event_type\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\n      FROM\n      (\n        SELECT\n          person_id\n          , start_date AS event_date\n          , -1 AS event_type\n        FROM #cohort_rows\n\n        UNION ALL\n\n\n        SELECT\n          person_id\n          , DATEADD(day,0,end_date) as end_date\n          , 1 AS event_type\n        FROM #cohort_rows\n      ) RAWDATA\n    ) e\n    WHERE interval_status = 0\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\n\tGROUP BY c.person_id, c.start_date\n) e\ngroup by person_id, end_date\n;\n\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\n;\n\n{0 != 0}?{\n-- BEGIN: Censored Stats\n\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\n\n-- END: Censored Stats\n}\n{0 != 0 & 0 != 0}?{\n\nCREATE TABLE #inclusion_rules (rule_sequence int);\n\n-- Find the event that is the 'best match' per person.  \n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\n\nselect q.person_id, q.event_id\ninto #best_events\nfrom #qualified_events Q\njoin (\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\n\tFROM (\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\n\t\tFROM #qualified_events Q\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\n\t) R\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\nWHERE ranked.rank_value = 1\n;\n\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\n-- 0: all events\n-- 1: best event\n\n\n-- BEGIN: Inclusion Impact Analysis - event\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #qualified_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #qualified_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\nFROM\n(select count_big(event_id) as total from #qualified_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - event\n\n-- BEGIN: Inclusion Impact Analysis - person\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #best_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #best_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\nFROM\n(select count_big(event_id) as total from #best_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - person\n\nTRUNCATE TABLE #best_events;\nDROP TABLE #best_events;\n\nTRUNCATE TABLE #inclusion_rules;\nDROP TABLE #inclusion_rules;\n}\n\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\n\nTRUNCATE TABLE #cohort_rows;\nDROP TABLE #cohort_rows;\n\nTRUNCATE TABLE #final_cohort;\nDROP TABLE #final_cohort;\n\nTRUNCATE TABLE #inclusion_events;\nDROP TABLE #inclusion_events;\n\nTRUNCATE TABLE #qualified_events;\nDROP TABLE #qualified_events;\n\nTRUNCATE TABLE #included_events;\nDROP TABLE #included_events;\n\nTRUNCATE TABLE #Codesets;\nDROP TABLE #Codesets;\n", "CREATE TABLE #Codesets (\n  codeset_id int NOT NULL,\n  concept_id bigint NOT NULL\n)\n;\n\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\n( \n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (192671)\nUNION  select c.concept_id\n  from @vocabulary_database_schema.CONCEPT c\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\n  and ca.ancestor_concept_id in (192671)\n  and c.invalid_reason is null\n\n) I\n) C\n;\n\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\nINTO #qualified_events\nFROM \n(\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM (-- Begin Primary Events\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\nFROM\n(\n  select E.person_id, E.start_date, E.end_date,\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM \n  (\n  -- Begin Condition Occurrence Criteria\nSELECT C.person_id, C.condition_occurrence_id as event_id, C.condition_start_date as start_date, COALESCE(C.condition_end_date, DATEADD(day,1,C.condition_start_date)) as end_date,\n  C.visit_occurrence_id, C.condition_start_date as sort_date\nFROM \n(\n  SELECT co.* \n  FROM @cdm_database_schema.CONDITION_OCCURRENCE co\n  JOIN #Codesets cs on (co.condition_concept_id = cs.concept_id and cs.codeset_id = 0)\n) C\n\n\n-- End Condition Occurrence Criteria\n\n  ) E\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\n) P\n\n-- End Primary Events\n) pe\n  \n) QE\n\n;\n\n--- Inclusion Rule Inserts\n\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\n\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\ninto #included_events\nFROM (\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\n  from\n  (\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\n    from #qualified_events Q\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\n  ) MG -- matching groups\n{0 != 0}?{\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\n}\n) Results\nWHERE Results.ordinal = 1\n;\n\n-- date offset strategy\n\nselect event_id, person_id, \n  case when DATEADD(day,0,start_date) > op_end_date then op_end_date else DATEADD(day,0,start_date) end as end_date\nINTO #strategy_ends\nfrom #included_events;\n\n\n-- generate cohort periods into #final_cohort\nselect person_id, start_date, end_date\nINTO #cohort_rows\nfrom ( -- first_ends\n\tselect F.person_id, F.start_date, F.end_date\n\tFROM (\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\n\t  from #included_events I\n\t  join ( -- cohort_ends\n-- cohort exit dates\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\n\t) F\n\tWHERE F.ordinal = 1\n) FE;\n\nselect person_id, min(start_date) as start_date, end_date\ninto #final_cohort\nfrom ( --cteEnds\n\tSELECT\n\t\t c.person_id\n\t\t, c.start_date\n\t\t, MIN(ed.end_date) AS end_date\n\tFROM #cohort_rows c\n\tJOIN ( -- cteEndDates\n    SELECT\n      person_id\n      , DATEADD(day,-1 * 0, event_date)  as end_date\n    FROM\n    (\n      SELECT\n        person_id\n        , event_date\n        , event_type\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\n      FROM\n      (\n        SELECT\n          person_id\n          , start_date AS event_date\n          , -1 AS event_type\n        FROM #cohort_rows\n\n        UNION ALL\n\n\n        SELECT\n          person_id\n          , DATEADD(day,0,end_date) as end_date\n          , 1 AS event_type\n        FROM #cohort_rows\n      ) RAWDATA\n    ) e\n    WHERE interval_status = 0\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\n\tGROUP BY c.person_id, c.start_date\n) e\ngroup by person_id, end_date\n;\n\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\n;\n\n{0 != 0}?{\n-- BEGIN: Censored Stats\n\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\n\n-- END: Censored Stats\n}\n{0 != 0 & 0 != 0}?{\n\nCREATE TABLE #inclusion_rules (rule_sequence int);\n\n-- Find the event that is the 'best match' per person.  \n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\n\nselect q.person_id, q.event_id\ninto #best_events\nfrom #qualified_events Q\njoin (\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\n\tFROM (\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\n\t\tFROM #qualified_events Q\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\n\t) R\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\nWHERE ranked.rank_value = 1\n;\n\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\n-- 0: all events\n-- 1: best event\n\n\n-- BEGIN: Inclusion Impact Analysis - event\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #qualified_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #qualified_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\nFROM\n(select count_big(event_id) as total from #qualified_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - event\n\n-- BEGIN: Inclusion Impact Analysis - person\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #best_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #best_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\nFROM\n(select count_big(event_id) as total from #best_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - person\n\nTRUNCATE TABLE #best_events;\nDROP TABLE #best_events;\n\nTRUNCATE TABLE #inclusion_rules;\nDROP TABLE #inclusion_rules;\n}\n\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\n\nTRUNCATE TABLE #cohort_rows;\nDROP TABLE #cohort_rows;\n\nTRUNCATE TABLE #final_cohort;\nDROP TABLE #final_cohort;\n\nTRUNCATE TABLE #inclusion_events;\nDROP TABLE #inclusion_events;\n\nTRUNCATE TABLE #qualified_events;\nDROP TABLE #qualified_events;\n\nTRUNCATE TABLE #included_events;\nDROP TABLE #included_events;\n\nTRUNCATE TABLE #Codesets;\nDROP TABLE #Codesets;\n", "CREATE TABLE #Codesets (\n  codeset_id int NOT NULL,\n  concept_id bigint NOT NULL\n)\n;\n\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\n( \n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1118084)\n\n) I\n) C\n;\n\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\nINTO #qualified_events\nFROM \n(\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM (-- Begin Primary Events\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\nFROM\n(\n  select E.person_id, E.start_date, E.end_date,\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM \n  (\n  -- Begin Drug Era Criteria\nselect C.person_id, C.drug_era_id as event_id, C.drug_era_start_date as start_date, C.drug_era_end_date as end_date,\n    CAST(NULL as bigint) as visit_occurrence_id,C.drug_era_start_date as sort_date\nfrom \n(\n  select de.* \n  FROM @cdm_database_schema.DRUG_ERA de\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\n) C\n\n\n-- End Drug Era Criteria\n\n  ) E\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\n) P\nWHERE P.ordinal = 1\n-- End Primary Events\n) pe\n  \n) QE\n\n;\n\n--- Inclusion Rule Inserts\n\nselect 0 as inclusion_rule_id, person_id, event_id\nINTO #Inclusion_0\nFROM \n(\n  select pe.person_id, pe.event_id\n  FROM #qualified_events pe\n  \nJOIN (\n-- Begin Criteria Group\nselect 0 as index_id, person_id, event_id\nFROM\n(\n  select E.person_id, E.event_id \n  FROM #qualified_events E\n  INNER JOIN\n  (\n    -- Begin Demographic Criteria\nSELECT 0 as index_id, e.person_id, e.event_id\nFROM #qualified_events E\nJOIN @cdm_database_schema.PERSON P ON P.PERSON_ID = E.PERSON_ID\nWHERE YEAR(E.start_date) - P.year_of_birth >= 30\nGROUP BY e.person_id, e.event_id\n-- End Demographic Criteria\n\n  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id\n  GROUP BY E.person_id, E.event_id\n  HAVING COUNT(index_id) = 1\n) G\n-- End Criteria Group\n) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id\n) Results\n;\n\nSELECT inclusion_rule_id, person_id, event_id\nINTO #inclusion_events\nFROM (select inclusion_rule_id, person_id, event_id from #Inclusion_0) I;\nTRUNCATE TABLE #Inclusion_0;\nDROP TABLE #Inclusion_0;\n\n\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\ninto #included_events\nFROM (\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\n  from\n  (\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\n    from #qualified_events Q\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\n  ) MG -- matching groups\n{1 != 0}?{\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),1)-1)\n}\n) Results\nWHERE Results.ordinal = 1\n;\n\n-- custom era strategy\n\nwith ctePersons(person_id) as (\n\tselect distinct person_id from #included_events\n)\n\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\nINTO #drugTarget\nFROM (\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\n\n\tUNION ALL\n\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\n) E\n;\n\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\nINTO #strategy_ends\nfrom #included_events et\nJOIN \n(\n  select ENDS.person_id, min(drug_exposure_start_date) as era_start_date, DATEADD(day,0, ENDS.era_end_date) as era_end_date\n  from\n  (\n    select de.person_id, de.drug_exposure_start_date, MIN(e.END_DATE) as era_end_date\n    FROM #drugTarget DE\n    JOIN \n    (\n      --cteEndDates\n      select PERSON_ID, DATEADD(day,-1 * 30,EVENT_DATE) as END_DATE -- unpad the end date by 30\n      FROM\n      (\n\t\t\t\tselect PERSON_ID, EVENT_DATE, EVENT_TYPE, \n\t\t\t\tMAX(START_ORDINAL) OVER (PARTITION BY PERSON_ID ORDER BY event_date, event_type, START_ORDINAL ROWS UNBOUNDED PRECEDING) AS start_ordinal,\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY EVENT_DATE, EVENT_TYPE, START_ORDINAL) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n\t\t\t\tfrom\n\t\t\t\t(\n\t\t\t\t\t-- select the start dates, assigning a row number to each\n\t\t\t\t\tSelect PERSON_ID, DRUG_EXPOSURE_START_DATE AS EVENT_DATE, 0 as EVENT_TYPE, ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY DRUG_EXPOSURE_START_DATE) as START_ORDINAL\n\t\t\t\t\tfrom #drugTarget D\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\t-- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\n\t\t\t\t\tselect PERSON_ID, DATEADD(day,30,DRUG_EXPOSURE_END_DATE), 1 as EVENT_TYPE, NULL\n\t\t\t\t\tFROM #drugTarget D\n\t\t\t\t) RAWDATA\n      ) E\n      WHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\n    ) E on DE.PERSON_ID = E.PERSON_ID and E.END_DATE >= DE.DRUG_EXPOSURE_START_DATE\n    GROUP BY de.person_id, de.drug_exposure_start_date\n  ) ENDS\n  GROUP BY ENDS.person_id, ENDS.era_end_date\n) ERAS on ERAS.person_id = et.person_id \nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\n\nTRUNCATE TABLE #drugTarget;\nDROP TABLE #drugTarget;\n\n\n-- generate cohort periods into #final_cohort\nselect person_id, start_date, end_date\nINTO #cohort_rows\nfrom ( -- first_ends\n\tselect F.person_id, F.start_date, F.end_date\n\tFROM (\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\n\t  from #included_events I\n\t  join ( -- cohort_ends\n-- cohort exit dates\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\n\t) F\n\tWHERE F.ordinal = 1\n) FE;\n\nselect person_id, min(start_date) as start_date, end_date\ninto #final_cohort\nfrom ( --cteEnds\n\tSELECT\n\t\t c.person_id\n\t\t, c.start_date\n\t\t, MIN(ed.end_date) AS end_date\n\tFROM #cohort_rows c\n\tJOIN ( -- cteEndDates\n    SELECT\n      person_id\n      , DATEADD(day,-1 * 0, event_date)  as end_date\n    FROM\n    (\n      SELECT\n        person_id\n        , event_date\n        , event_type\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\n      FROM\n      (\n        SELECT\n          person_id\n          , start_date AS event_date\n          , -1 AS event_type\n        FROM #cohort_rows\n\n        UNION ALL\n\n\n        SELECT\n          person_id\n          , DATEADD(day,0,end_date) as end_date\n          , 1 AS event_type\n        FROM #cohort_rows\n      ) RAWDATA\n    ) e\n    WHERE interval_status = 0\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\n\tGROUP BY c.person_id, c.start_date\n) e\ngroup by person_id, end_date\n;\n\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\n;\n\n{0 != 0}?{\n-- BEGIN: Censored Stats\n\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\n\n-- END: Censored Stats\n}\n{0 != 0 & 1 != 0}?{\n\n-- Create a temp table of inclusion rule rows for joining in the inclusion rule impact analysis\n\nselect cast(rule_sequence as int) as rule_sequence\ninto #inclusion_rules\nfrom (\n  SELECT CAST(0 as int) as rule_sequence\n) IR;\n\n\n-- Find the event that is the 'best match' per person.  \n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\n\nselect q.person_id, q.event_id\ninto #best_events\nfrom #qualified_events Q\njoin (\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\n\tFROM (\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\n\t\tFROM #qualified_events Q\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\n\t) R\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\nWHERE ranked.rank_value = 1\n;\n\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\n-- 0: all events\n-- 1: best event\n\n\n-- BEGIN: Inclusion Impact Analysis - event\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #qualified_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #qualified_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\nFROM\n(select count_big(event_id) as total from #qualified_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - event\n\n-- BEGIN: Inclusion Impact Analysis - person\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #best_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #best_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\nFROM\n(select count_big(event_id) as total from #best_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - person\n\nTRUNCATE TABLE #best_events;\nDROP TABLE #best_events;\n\nTRUNCATE TABLE #inclusion_rules;\nDROP TABLE #inclusion_rules;\n}\n\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\n\nTRUNCATE TABLE #cohort_rows;\nDROP TABLE #cohort_rows;\n\nTRUNCATE TABLE #final_cohort;\nDROP TABLE #final_cohort;\n\nTRUNCATE TABLE #inclusion_events;\nDROP TABLE #inclusion_events;\n\nTRUNCATE TABLE #qualified_events;\nDROP TABLE #qualified_events;\n\nTRUNCATE TABLE #included_events;\nDROP TABLE #included_events;\n\nTRUNCATE TABLE #Codesets;\nDROP TABLE #Codesets;\n", "CREATE TABLE #Codesets (\n  codeset_id int NOT NULL,\n  concept_id bigint NOT NULL\n)\n;\n\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\n( \n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (1124300)\n\n) I\n) C\n;\n\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\nINTO #qualified_events\nFROM \n(\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM (-- Begin Primary Events\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\nFROM\n(\n  select E.person_id, E.start_date, E.end_date,\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\n  FROM \n  (\n  -- Begin Drug Era Criteria\nselect C.person_id, C.drug_era_id as event_id, C.drug_era_start_date as start_date, C.drug_era_end_date as end_date,\n    CAST(NULL as bigint) as visit_occurrence_id,C.drug_era_start_date as sort_date\nfrom \n(\n  select de.* \n  FROM @cdm_database_schema.DRUG_ERA de\nwhere de.drug_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\n) C\n\n\n-- End Drug Era Criteria\n\n  ) E\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\n) P\nWHERE P.ordinal = 1\n-- End Primary Events\n) pe\n  \n) QE\n\n;\n\n--- Inclusion Rule Inserts\n\nselect 0 as inclusion_rule_id, person_id, event_id\nINTO #Inclusion_0\nFROM \n(\n  select pe.person_id, pe.event_id\n  FROM #qualified_events pe\n  \nJOIN (\n-- Begin Criteria Group\nselect 0 as index_id, person_id, event_id\nFROM\n(\n  select E.person_id, E.event_id \n  FROM #qualified_events E\n  INNER JOIN\n  (\n    -- Begin Demographic Criteria\nSELECT 0 as index_id, e.person_id, e.event_id\nFROM #qualified_events E\nJOIN @cdm_database_schema.PERSON P ON P.PERSON_ID = E.PERSON_ID\nWHERE YEAR(E.start_date) - P.year_of_birth >= 30\nGROUP BY e.person_id, e.event_id\n-- End Demographic Criteria\n\n  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id\n  GROUP BY E.person_id, E.event_id\n  HAVING COUNT(index_id) = 1\n) G\n-- End Criteria Group\n) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id\n) Results\n;\n\nSELECT inclusion_rule_id, person_id, event_id\nINTO #inclusion_events\nFROM (select inclusion_rule_id, person_id, event_id from #Inclusion_0) I;\nTRUNCATE TABLE #Inclusion_0;\nDROP TABLE #Inclusion_0;\n\n\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\ninto #included_events\nFROM (\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\n  from\n  (\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\n    from #qualified_events Q\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\n  ) MG -- matching groups\n{1 != 0}?{\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),1)-1)\n}\n) Results\nWHERE Results.ordinal = 1\n;\n\n-- custom era strategy\n\nwith ctePersons(person_id) as (\n\tselect distinct person_id from #included_events\n)\n\nselect person_id, drug_exposure_start_date, drug_exposure_end_date\nINTO #drugTarget\nFROM (\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_concept_id = cs.concept_id\n\n\tUNION ALL\n\n\tselect de.PERSON_ID, DRUG_EXPOSURE_START_DATE, COALESCE(DRUG_EXPOSURE_END_DATE, DATEADD(day,DAYS_SUPPLY,DRUG_EXPOSURE_START_DATE), DATEADD(day,1,DRUG_EXPOSURE_START_DATE)) as DRUG_EXPOSURE_END_DATE \n\tFROM @cdm_database_schema.DRUG_EXPOSURE de\n\tJOIN ctePersons p on de.person_id = p.person_id\n\tJOIN #Codesets cs on cs.codeset_id = 0 AND de.drug_source_concept_id = cs.concept_id\n) E\n;\n\nselect et.event_id, et.person_id, ERAS.era_end_date as end_date\nINTO #strategy_ends\nfrom #included_events et\nJOIN \n(\n  select ENDS.person_id, min(drug_exposure_start_date) as era_start_date, DATEADD(day,0, ENDS.era_end_date) as era_end_date\n  from\n  (\n    select de.person_id, de.drug_exposure_start_date, MIN(e.END_DATE) as era_end_date\n    FROM #drugTarget DE\n    JOIN \n    (\n      --cteEndDates\n      select PERSON_ID, DATEADD(day,-1 * 30,EVENT_DATE) as END_DATE -- unpad the end date by 30\n      FROM\n      (\n\t\t\t\tselect PERSON_ID, EVENT_DATE, EVENT_TYPE, \n\t\t\t\tMAX(START_ORDINAL) OVER (PARTITION BY PERSON_ID ORDER BY event_date, event_type, START_ORDINAL ROWS UNBOUNDED PRECEDING) AS start_ordinal,\n\t\t\t\tROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY EVENT_DATE, EVENT_TYPE, START_ORDINAL) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n\t\t\t\tfrom\n\t\t\t\t(\n\t\t\t\t\t-- select the start dates, assigning a row number to each\n\t\t\t\t\tSelect PERSON_ID, DRUG_EXPOSURE_START_DATE AS EVENT_DATE, 0 as EVENT_TYPE, ROW_NUMBER() OVER (PARTITION BY PERSON_ID ORDER BY DRUG_EXPOSURE_START_DATE) as START_ORDINAL\n\t\t\t\t\tfrom #drugTarget D\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\t-- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\n\t\t\t\t\tselect PERSON_ID, DATEADD(day,30,DRUG_EXPOSURE_END_DATE), 1 as EVENT_TYPE, NULL\n\t\t\t\t\tFROM #drugTarget D\n\t\t\t\t) RAWDATA\n      ) E\n      WHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\n    ) E on DE.PERSON_ID = E.PERSON_ID and E.END_DATE >= DE.DRUG_EXPOSURE_START_DATE\n    GROUP BY de.person_id, de.drug_exposure_start_date\n  ) ENDS\n  GROUP BY ENDS.person_id, ENDS.era_end_date\n) ERAS on ERAS.person_id = et.person_id \nWHERE et.start_date between ERAS.era_start_date and ERAS.era_end_date;\n\nTRUNCATE TABLE #drugTarget;\nDROP TABLE #drugTarget;\n\n\n-- generate cohort periods into #final_cohort\nselect person_id, start_date, end_date\nINTO #cohort_rows\nfrom ( -- first_ends\n\tselect F.person_id, F.start_date, F.end_date\n\tFROM (\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\n\t  from #included_events I\n\t  join ( -- cohort_ends\n-- cohort exit dates\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\nUNION ALL\n-- End Date Strategy\nSELECT event_id, person_id, end_date from #strategy_ends\n\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\n\t) F\n\tWHERE F.ordinal = 1\n) FE;\n\nselect person_id, min(start_date) as start_date, end_date\ninto #final_cohort\nfrom ( --cteEnds\n\tSELECT\n\t\t c.person_id\n\t\t, c.start_date\n\t\t, MIN(ed.end_date) AS end_date\n\tFROM #cohort_rows c\n\tJOIN ( -- cteEndDates\n    SELECT\n      person_id\n      , DATEADD(day,-1 * 0, event_date)  as end_date\n    FROM\n    (\n      SELECT\n        person_id\n        , event_date\n        , event_type\n        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status\n      FROM\n      (\n        SELECT\n          person_id\n          , start_date AS event_date\n          , -1 AS event_type\n        FROM #cohort_rows\n\n        UNION ALL\n\n\n        SELECT\n          person_id\n          , DATEADD(day,0,end_date) as end_date\n          , 1 AS event_type\n        FROM #cohort_rows\n      ) RAWDATA\n    ) e\n    WHERE interval_status = 0\n  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date\n\tGROUP BY c.person_id, c.start_date\n) e\ngroup by person_id, end_date\n;\n\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\n;\n\n{0 != 0}?{\n-- BEGIN: Censored Stats\n\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\n\n-- END: Censored Stats\n}\n{0 != 0 & 1 != 0}?{\n\n-- Create a temp table of inclusion rule rows for joining in the inclusion rule impact analysis\n\nselect cast(rule_sequence as int) as rule_sequence\ninto #inclusion_rules\nfrom (\n  SELECT CAST(0 as int) as rule_sequence\n) IR;\n\n\n-- Find the event that is the 'best match' per person.  \n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\n\nselect q.person_id, q.event_id\ninto #best_events\nfrom #qualified_events Q\njoin (\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\n\tFROM (\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\n\t\tFROM #qualified_events Q\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\n\t) R\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\nWHERE ranked.rank_value = 1\n;\n\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\n-- 0: all events\n-- 1: best event\n\n\n-- BEGIN: Inclusion Impact Analysis - event\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #qualified_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #qualified_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\nFROM\n(select count_big(event_id) as total from #qualified_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - event\n\n-- BEGIN: Inclusion Impact Analysis - person\n-- calculte matching group counts\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\nfrom\n(\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\n  from #best_events Q\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\n  GROUP BY Q.person_id, Q.event_id\n) MG -- matching groups\ngroup by inclusion_rule_mask\n;\n\n-- calculate gain counts \ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\nfrom #inclusion_rules ir\nleft join\n(\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\n  from #best_events Q\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\n  group by i.inclusion_rule_id\n) T on ir.rule_sequence = T.inclusion_rule_id\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\n;\n\n-- calculate totals\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\nFROM\n(select count_big(event_id) as total from #best_events) PC,\n(select sum(sr.person_count) as total\n  from @results_database_schema.cohort_inclusion_result sr\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\n) FC\n;\n\n-- END: Inclusion Impact Analysis - person\n\nTRUNCATE TABLE #best_events;\nDROP TABLE #best_events;\n\nTRUNCATE TABLE #inclusion_rules;\nDROP TABLE #inclusion_rules;\n}\n\nTRUNCATE TABLE #strategy_ends;\nDROP TABLE #strategy_ends;\n\n\nTRUNCATE TABLE #cohort_rows;\nDROP TABLE #cohort_rows;\n\nTRUNCATE TABLE #final_cohort;\nDROP TABLE #final_cohort;\n\nTRUNCATE TABLE #inclusion_events;\nDROP TABLE #inclusion_events;\n\nTRUNCATE TABLE #qualified_events;\nDROP TABLE #qualified_events;\n\nTRUNCATE TABLE #included_events;\nDROP TABLE #included_events;\n\nTRUNCATE TABLE #Codesets;\nDROP TABLE #Codesets;\n"],
  "attr_class": "data.frame",
  "attr_row.names": [1, 2, 3, 4, 5]
}
