name: Docker Build, Push, Prune (called)

on:
  workflow_dispatch:
    inputs:
      AZ_REGISTRY_REPOSITORY:
        required: true
        type: string
      DOCKER_BUILD_CONTEXT_PATH:
        default: "."
        required: false
        type: string
      DOCKER_BUILD_FILE_PATH:
        required: true
        type: string
      DOCKER_BUILD_PLATFORMS:
        default: "linux/amd64"
        required: false
        type: string
      DOCKER_BUILD_PULL_BOOL_STR:
        default: "false"
        required: false
        type: string
      DOCKER_BUILD_PUSH_BOOL_STR:
        default: "false"
        required: false
        type: string
      DOCKER_IMG_TAG_NAME:
        required: true
        type: string
      GIT_BRANCH_NAME:
        required: true
        type: string
      GIT_COMMIT_ID__PLUGINS_REPO:
        default: main
        required: false
        type: string
      GIT_REPO_FULL_NAME:
        required: true
        type: string
      GIT_SSH_PRIVATE_KEYS:
        default: "null"
        required: false
        type: string

  workflow_call:
    inputs:
      AZ_REGISTRY_REPOSITORY:
        required: true
        type: string
      DOCKER_BUILD_CONTEXT_PATH:
        default: "."
        required: false
        type: string
      DOCKER_BUILD_FILE_PATH:
        required: true
        type: string
      DOCKER_BUILD_PLATFORMS:
        default: "linux/amd64"
        required: false
        type: string
      DOCKER_BUILD_PULL_BOOL_STR:
        default: "false"
        required: false
        type: string
      DOCKER_BUILD_PUSH_BOOL_STR:
        default: "true"
        required: false
        type: string
      DOCKER_IMG_TAG_NAME:
        required: true
        type: string
      GIT_BRANCH_NAME:
        required: true
        type: string
      GIT_COMMIT_ID__PLUGINS_REPO:
        default: main
        required: false
        type: string
      GIT_REPO_FULL_NAME:
        required: true
        type: string
      GIT_SSH_PRIVATE_KEYS:
        default: "null"
        required: false
        type: string

jobs:
  build-push-prune:
    name: ${{ inputs.AZ_REGISTRY_REPOSITORY }}
    runs-on: ubuntu-latest
    steps:
      - name: inputs
        shell: bash
        env:
          AZ_REGISTRY_REPOSITORY: ${{ inputs.AZ_REGISTRY_REPOSITORY }}
          DOCKER_BUILD_CONTEXT_PATH: ${{ inputs.DOCKER_BUILD_CONTEXT_PATH }}
          DOCKER_BUILD_FILE_PATH: ${{ inputs.DOCKER_BUILD_FILE_PATH }}
          DOCKER_BUILD_PULL_BOOL_STR: ${{ inputs.DOCKER_BUILD_PULL_BOOL_STR }}
          DOCKER_BUILD_PUSH_BOOL_STR: ${{ inputs.DOCKER_BUILD_PUSH_BOOL_STR }}
          DOCKER_IMG_TAG_NAME: ${{ inputs.DOCKER_IMG_TAG_NAME }}
          GIT_BRANCH_NAME: ${{ inputs.GIT_BRANCH_NAME }}
          GIT_COMMIT_ID__PLUGINS_REPO: ${{ inputs.GIT_COMMIT_ID__PLUGINS_REPO }}
          GIT_REPO_FULL_NAME: ${{ inputs.GIT_REPO_FULL_NAME }}
        run: |
          echo AZ_REGISTRY_REPOSITORY=$AZ_REGISTRY_REPOSITORY | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_CONTEXT_PATH=$DOCKER_BUILD_CONTEXT_PATH
          echo DOCKER_BUILD_FILE_PATH=$DOCKER_BUILD_FILE_PATH
          echo DOCKER_BUILD_PULL_BOOL_STR=$DOCKER_BUILD_PULL_BOOL_STR
          echo DOCKER_BUILD_PUSH_BOOL_STR=$DOCKER_BUILD_PUSH_BOOL_STR
          echo DOCKER_IMG_TAG_NAME=$DOCKER_IMG_TAG_NAME
          echo GIT_BRANCH_NAME=$GIT_BRANCH_NAME
          echo GIT_REPO_FULL_NAME=$GIT_REPO_FULL_NAME

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GIT_BRANCH_NAME }}
          repository: ${{ inputs.GIT_REPO_FULL_NAME }}
          token: ${{ secrets.CI_PAT }}

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AZ_REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.AZ_REGISTRY_USERNAME }}
          password: ${{ secrets.AZ_REGISTRY_PASSWORD }}

      - name: SSH_AUTH_SOCK if GIT_SSH_PRIVATE_KEYS is null
        shell: bash
        if: ${{ inputs.GIT_SSH_PRIVATE_KEYS == 'null' }}
        run: |
          ssh-agent -s | sed -e 's/;.*//' -e '/^echo/d' | tee -a $GITHUB_ENV

      - name: SSH_AUTH_SOCK if GIT_SSH_PRIVATE_KEYS is not null
        uses: webfactory/ssh-agent@v0.9.0
        if: ${{ inputs.GIT_SSH_PRIVATE_KEYS != 'null' }}
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_STARBOARD_WRAP }}
            ${{ secrets.SSH_PRIVATE_KEY_NOTEBOOK_BASE }}

      - name: Collect Git and SSH config files in a directory that is part of the Docker build context
        if: ${{ inputs.GIT_SSH_PRIVATE_KEYS != 'null' }}
        run: |
          cp -r ~/.gitconfig  ~/.ssh .github/
          cd .github/
          sed 's|/home/runner|/root|g' -i.bak .ssh/config

      - uses: docker/setup-buildx-action@v3
        id: builder

      - name: Purge docker images and cache
        if: ${{ vars.GHA_BUILD_DEBUG != 'true' }}
        run: |
          docker image prune -af
          docker buildx prune -af

      - name: Build and push
        uses: docker/build-push-action@v6
        if: ${{ vars.DOCKER_BUILD_DISABLE != 'true' }}
        with:
          builder: ${{ steps.builder.outputs.name }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          # ulimit: nofile=1048576:1048576
          platforms: ${{ inputs.DOCKER_BUILD_PLATFORMS }}
          context: ${{ inputs.DOCKER_BUILD_CONTEXT_PATH }}
          pull: ${{ inputs.DOCKER_BUILD_PULL_BOOL_STR == 'true' }}
          file: ${{ inputs.DOCKER_BUILD_FILE_PATH }}
          push: ${{ inputs.DOCKER_BUILD_PUSH_BOOL_STR == 'true' }}
          tags: ${{ vars.AZ_REGISTRY_NAME }}.azurecr.io/${{ inputs.AZ_REGISTRY_REPOSITORY }}:${{ inputs.DOCKER_IMG_TAG_NAME }}
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}
          build-args: |
            docker_image_prefix=${{ vars.AZ_REGISTRY_NAME }}.azurecr.io
            GIT_COMMIT_ARG=${{ github.sha }}
            D2E_PLUGIN_REPO=${{ vars.D2E_PLUGIN_REPO }}
            GIT_COMMIT_ID__PLUGINS_REPO=${{ inputs.GIT_COMMIT_ID__PLUGINS_REPO }}
            GIT_TOKEN__PLUGINS_REPO_READ=${{ secrets.GIT_TOKEN__PLUGINS_REPO_READ }}

      - name: Post purge
        if: ${{ vars.GHA_BUILD_DEBUG != 'true' }}
        run: |
          docker system prune -af

      - name: Prune tagged images
        if: needs.setup.outputs.GIT_BRANCH_NAME == 'develop' || github.event_name == 'workflow_dispatch'
        shell: bash
        env:
          AZ_REGISTRY_NAME: ${{ vars.AZ_REGISTRY_NAME }}
          AZ_REGISTRY_PASSWORD: ${{ secrets.AZ_REGISTRY_PASSWORD }}
          AZ_REGISTRY_PRUNE_ENABLE: ${{ vars.AZ_REGISTRY_PRUNE_ENABLE }}
          AZ_REGISTRY_PRUNE_DAYS_TAGGED: ${{ vars.AZ_REGISTRY_PRUNE_DAYS_TAGGED }}
          AZ_REGISTRY_REPOSITORY: ${{ inputs.AZ_REGISTRY_REPOSITORY }}
          AZ_REGISTRY_USERNAME: ${{ secrets.AZ_REGISTRY_USERNAME }}
          AZ_REGISTRY_WHITELIST_REGEX: ${{ vars.AZ_REGISTRY_WHITELIST_REGEX }}
        run: |
          if [ ${AZ_REGISTRY_PRUNE_DAYS_TAGGED:-20} = 0 ]; then
            AZ_REGISTRY_PRUNE_TIMESTAMP=$(date -u -Is)
          else
            TODAY=$(date +%Y-%m-%d)
            AZ_REGISTRY_PRUNE_TIMESTAMP="$(date -d "$TODAY - ${AZ_REGISTRY_PRUNE_DAYS_TAGGED:-20} days" +%Y-%m-%d)"
          fi
          echo AZ_REGISTRY_PRUNE_TIMESTAMP=$AZ_REGISTRY_PRUNE_TIMESTAMP | tee -a $GITHUB_STEP_SUMMARY

          echo ". 1 - GET manifest metadata -  deprecated warning is not relevant"
          az acr manifest metadata list --name ${AZ_REGISTRY_REPOSITORY} --registry ${AZ_REGISTRY_NAME} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${AZ_REGISTRY_PRUNE_TIMESTAMP}' && not_null(tags)]" > private.json
          wc -l private.json

          echo ". 2 - ANALYZE each tag as deletable True/False - show first 20"
          cat private.json | yq -rP 'map({"digest":.digest, "tags":(.tags|@json),"count":(.tags|length),"lengths":([.tags[]|length]|@json),"deletable":(.tags|map(test(env(AZ_REGISTRY_WHITELIST_REGEX))|not)|@json)})' | tee private1-analysis.yml | yq '.[0:20]'

          echo ". 3 - ACTION lock manifests with deletable False i.e. tags matching RegEx"
          cat private1-analysis.yml | yq 'map(select(.deletable|contains("false")).digest) | .[1]' | xargs -I% az acr repository update -u ${AZ_REGISTRY_USERNAME} -p ${AZ_REGISTRY_PASSWORD} --name ${AZ_REGISTRY_NAME} --image ${AZ_REGISTRY_REPOSITORY}@% --delete-enabled false --write-enabled true | yq -P

          echo ". 4 - SELECT images to be deleted i.e. manifests excepting deletable False i.e. tags not matching RegEx"
          cat private1-analysis.yml | yq 'map(select(.deletable|contains("false")|not))' > private2-todelete.yml
          echo . INFO for deletion - BranchNames
          cat private2-todelete.yml | yq -P 'map(select(.lengths!="[40]") | .tags | @jsond)'
          echo . INFO for deletion - single tag commitIds
          cat private2-todelete.yml | yq -P 'map(select(.lengths=="[40]") | .tags | @jsond)'

          if [ "${AZ_REGISTRY_PRUNE_ENABLE}" = true ]; then
            echo ". 5 - ACTION delete tagged digests ..."
            yq '.[].digest' private2-todelete.yml | sort -u | xargs -I% az acr repository delete -u ${AZ_REGISTRY_USERNAME} -p ${AZ_REGISTRY_PASSWORD} --name ${AZ_REGISTRY_NAME} --image ${AZ_REGISTRY_REPOSITORY}@% --yes
          else
            echo ". 5 - SKIPPED delete digests ..."
          fi

      - name: Prune untagged images
        shell: bash
        if: always()
        env:
          AZ_REGISTRY_NAME: ${{ vars.AZ_REGISTRY_NAME }}
          AZ_REGISTRY_PASSWORD: ${{ secrets.AZ_REGISTRY_PASSWORD }}
          AZ_REGISTRY_PRUNE_ENABLE: ${{ vars.AZ_REGISTRY_PRUNE_ENABLE }}
          AZ_REGISTRY_PRUNE_DAYS_UNTAGGED: ${{ vars.AZ_REGISTRY_PRUNE_DAYS_UNTAGGED }}
          AZ_REGISTRY_REPOSITORY: ${{ inputs.AZ_REGISTRY_REPOSITORY }}
          AZ_REGISTRY_USERNAME: ${{ secrets.AZ_REGISTRY_USERNAME }}
          AZ_REGISTRY_WHITELIST_REGEX: ${{ vars.AZ_REGISTRY_WHITELIST_REGEX }}
        run: |
          if [ ${AZ_REGISTRY_PRUNE_DAYS_UNTAGGED:-1} = 0 ]; then
            AZ_REGISTRY_PRUNE_TIMESTAMP=$(date -u -Is)
          else
            TODAY=$(date +%Y-%m-%d)
            AZ_REGISTRY_PRUNE_TIMESTAMP="$(date -d "$TODAY - ${AZ_REGISTRY_PRUNE_DAYS_UNTAGGED:-1} days" +%Y-%m-%d)"
          fi
          echo AZ_REGISTRY_PRUNE_TIMESTAMP=$AZ_REGISTRY_PRUNE_TIMESTAMP | tee -a $GITHUB_STEP_SUMMARY

          echo ". ACTION delete untagged digests ..."
          az acr manifest metadata list --registry ${AZ_REGISTRY_NAME} --name ${AZ_REGISTRY_REPOSITORY} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${AZ_REGISTRY_PRUNE_TIMESTAMP}' && tags[0]==null].digest" -o tsv  | xargs -I% az acr repository delete -n ${AZ_REGISTRY_NAME} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" -t ${AZ_REGISTRY_REPOSITORY}@% -y || true
