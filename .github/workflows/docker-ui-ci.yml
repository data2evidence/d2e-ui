name: Build Docker Image

on:
  workflow_dispatch:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
  push:
    branches:
      - develop

# Run only one job per branch
concurrency:
  group: ${{ github.head_ref || github.ref_name }}-docker-ui-ci # per branch build
  cancel-in-progress: ${{ (github.head_ref || github.ref_name) != 'develop' }} # except for develop branch

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build-docker-ui:
    environment: development
    runs-on: ubuntu-20.04
    if: github.ref_name == 'develop' || github.event_name == 'workflow_dispatch' || contains('release', ${{ github.head_ref || github.ref_name }}) || ( github.event_name == 'pull_request' && !github.event.pull_request.draft ) # runs if PR is not draft /or/ workflow_dispatch /or/ release branch
    strategy:
      matrix:
        include:
          - name: alp-data-node/alp-caddy
            directory: .
            context: .
            fileName: Dockerfile
            platforms: linux/amd64

    steps:
      - uses: actions/checkout@v4

      # - name: Get docker tag name
      #   id: docker_tag
      #   shell: bash
      #   run: |
      #       echo BRANCH_NAME=$BRANCH_NAME
      #       if [ $BRANCH_NAME = "develop" ]; then
      #         echo "is_push=true" >> $GITHUB_OUTPUT
      #       elif [ $GITHUB_EVENT_NAME = "workflow_dispatch" ]; then
      #         echo "is_push=true" >> $GITHUB_OUTPUT
      #       else
      #         echo "is_push=false" >> $GITHUB_OUTPUT
      #       fi

      # - uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: |
      #         ${{ secrets.SSH_PRIVATE_KEY_STARBOARD_WRAP }}
      #         ${{ secrets.SSH_PRIVATE_KEY_NOTEBOOK_BASE }}

      # - name: Login to ACR
      #   uses: docker/login-action@v3.1.0
      #   with:
      #     registry: alpcr.azurecr.io
      #     username: ${{ secrets.REGISTRY_USERNAME }}
      #     password: ${{ secrets.REGISTRY_PASSWORD }}

      # - name: Collect Git and SSH config files in a directory that is part of the Docker build context
      #   run: |
      #     cp -r ~/.gitconfig  ~/.ssh .github/
      #     cd .github/
      #     sed 's|/home/runner|/root|g' -i.bak .ssh/config

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      #   id: builder

      # - name: Build and push
      #   uses: docker/build-push-action@v5.3.0
      #   id: build_push
      #   continue-on-error: false
      #   with:
      #     builder: ${{ steps.builder.outputs.name }}
      #     # cache-from: type=gha
      #     # cache-to: type=gha,mode=max
      #     ulimit: nofile=1048576:1048576
      #     platforms: ${{ matrix.platforms || 'linux/amd64,linux/arm64' }}
      #     context: ${{ matrix.context }}
      #     file:  ${{ matrix.directory }}/${{ matrix.fileName }}
      #     push: ${{ steps.docker_tag.outputs.is_push }}
      #     tags: alpcr.azurecr.io/${{ matrix.name }}:${{ env.BRANCH_NAME }},alpcr.azurecr.io/${{ matrix.name }}:${{ github.sha }}
      #     ssh: |
      #       default=${{ env.SSH_AUTH_SOCK }}
      #     build-args: |
      #       docker_image_prefix=alpcr.azurecr.io
      #       GIT_COMMIT_ARG=${{ github.sha }}

      - name: Delete images older than 14 days
        id: delete_old_images
        # if: false # ${{ github.event_name != 'workflow_dispatch' && github.ref_name == 'develop' }}
        shell: bash
        env:
          AZ_ENABLE_DELETE: ${{ vars.AZ_ENABLE_DELETE }} # true|false - enable/disable as needed
          AZ_REGISTRY_NAME: ${{ vars.AZ_REGISTRY_NAME }}
          AZ_REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          AZ_REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          AZ_TENANT_NAME: ${{ vars.AZ_TENANT_NAME }}
          AZ_REPOSITORY: ${{ vars.AZ_REPOSITORY }}
          NUMBER_OF_DAYS: 14
        run: |
          echo AZ_REPOSITORY=$AZ_REPOSITORY | tee -a $GITHUB_STEP_SUMMARY
          TODAY=$(date +%Y-%m-%d)
          TWO_WEEKS_AGO="$(date -d "$TODAY - ${NUMBER_OF_DAYS} days" +%Y-%m-%d)"

          echo ". INFO: calculate digests"
          # az acr manifest metadata list --name ${AZ_REPOSITORY} --registry ${AZ_REGISTRY_NAME} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${TWO_WEEKS_AGO}' && not_null(tags)]" > private.json
          az acr manifest metadata list --name ${AZ_REPOSITORY} --registry ${AZ_REGISTRY_NAME} --username "${AZ_REGISTRY_USERNAME}" --password "${AZ_REGISTRY_PASSWORD}" --orderby time_asc --query "[?not_null(tags)]" > private.json

          # analyze
          cat private.json | yq -r 'map(.digest as $digest | (.tags|length) as $count | .tags[] as $tag | {"digest":$digest,"count":$count,"tag":$tag,"length":($tag|length)})' > private.yml

          echo . "clean#1 - single tag per manifest of 40 chars commit_id"
          cat private.yml | yq 'map(select(.count==1 and .length==40))' | tee private-clean1.yml | yq '.[].tag'

          echo . "clean#2 - multi tag per manifest where not matching regex"
          cat private.yml | yq 'map(select(.count!=1 and .length!=40 and (.tag|test("^v|^rc|develop|-alpha$|-beta$|^airms-|-airms-")|not)))' | tee private-clean2.yml | yq '.[].tag' | sort

          echo . private-clean1.yml syntax check
          cat private-clean1.yml | yq >/dev/null

          echo . private-clean2.yml syntax check
          cat private-clean2.yml | yq >/dev/null

          echo . INFO: combine digests to delete
          yq -N '.[].digest' private-clean1.yml private-clean2.yml | sort -u | tee private-digests.txt

          if [ "${AZ_ENABLE_DELETE}" = true ]; then
            echo . ACTION: delete digests ...
            cat private-digests.txt | xargs -I% az acr repository delete -u ${AZ_REGISTRY_USERNAME} -p ${AZ_REGISTRY_PASSWORD} --name ${AZ_REGISTRY_NAME} --image $REPOSITORY@% --yes
          fi
