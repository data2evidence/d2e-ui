name: Docker Build, Push, Prune

on:
  workflow_dispatch:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
  push:
    branches:
      - develop

# Run only one job per branch
concurrency:
  group: ${{ github.head_ref || github.ref_name }}-docker-ui-ci # per branch build
  cancel-in-progress: ${{ (github.head_ref || github.ref_name) != 'develop' }} # except for develop branch

jobs:
  bld:
    environment: development
    runs-on:
      group: dockerup # Custom runner 4 CPUs & 14 Gb RAM
    if: github.ref_name == 'develop' || github.event_name == 'workflow_dispatch' || contains('release', ${{ github.head_ref || github.ref_name }}) || ( github.event_name == 'pull_request' && !github.event.pull_request.draft ) # runs if PR is not draft /or/ workflow_dispatch /or/ release branch
    env:
      AZ_REG_NAME: ${{ vars.AZ_REG_NAME }}
      AZ_REG_PRUNE_DAYS_TAGGED: ${{ vars.AZ_REG_PRUNE_DAYS_TAGGED || '20' }}
      AZ_REG_PRUNE_DAYS_UNTAGGED: ${{ vars.AZ_REG_PRUNE_DAYS_UNTAGGED || '7' }}
      AZ_REG_PRUNE_DELETE_TAGGED: ${{ vars.AZ_REG_PRUNE_DELETE_TAGGED || 'false' }}
      AZ_REG_PRUNE_DELETE_UNTAGGED: ${{ vars.AZ_REG_PRUNE_DELETE_UNTAGGED || 'false' }}
      AZ_REG_PRUNE_ENABLE_TAGGED: ${{ vars.AZ_REG_PRUNE_ENABLE_TAGGED || 'false' }}
      AZ_REG_WHITELIST_REGEX: ${{ vars.AZ_REG_WHITELIST_REGEX }}
      DOCKER_BUILD_DEBUG: ${{ vars.DOCKER_BUILD_DEBUG || 'false' }}
      DOCKER_BUILD_DISABLE: ${{ vars.DOCKER_BUILD_DISABLE || 'false' }}
      DOCKER_BUILD_PUSH_BOOL_OVERRIDE: ${{ vars.DOCKER_BUILD_PUSH_BOOL_OVERRIDE || 'false' }}
      GIT_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    strategy:
      matrix:
        include:
          - name: alp-data-node/alp-caddy
            directory: .
            context: .
            fileName: Dockerfile
            platforms: linux/amd64

    steps:
      - name: Free Disk Space (Ubuntu)
        if: env.DOCKER_BUILD_DISABLE == 'false'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false

      - uses: actions/checkout@v4

      - name: Setup
        id: setup
        run: |
          DOCKER_BUILD_PUSH_BOOL_STR=false
          if [ $DOCKER_BUILD_PUSH_BOOL_OVERRIDE = "true" ] || [ $GITHUB_EVENT_NAME = "workflow_dispatch" ] || [ $GIT_BRANCH_NAME = 'develop' ]; then
            DOCKER_BUILD_PUSH_BOOL_STR=true
            echo push to registry | tee -a $GITHUB_STEP_SUMMARY
          fi
          echo "DOCKER_BUILD_PLATFORMS=linux/amd64" | tee -a $GITHUB_OUTPUT
          echo "DOCKER_BUILD_PUSH_BOOL_STR=$DOCKER_BUILD_PUSH_BOOL_STR" | tee -a $GITHUB_OUTPUT

      - uses: webfactory/ssh-agent@v0.9.0
        if: env.DOCKER_BUILD_DISABLE == 'false'
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_STARBOARD_WRAP }}
            ${{ secrets.SSH_PRIVATE_KEY_NOTEBOOK_BASE }}

      - name: Login to ACR
        if: env.DOCKER_BUILD_DISABLE == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZ_REG_NAME }}.azurecr.io
          username: ${{ secrets.AZ_REG_USERNAME }}
          password: ${{ secrets.AZ_REG_PASSWORD }}

      - name: Collect Git and SSH config files in a directory that is part of the Docker build context
        if: env.DOCKER_BUILD_DISABLE == 'false'
        run: |
          cp -r ~/.gitconfig  ~/.ssh .github/
          cd .github/
          sed 's|/home/runner|/root|g' -i.bak .ssh/config

      - name: Set up Docker Buildx
        if: env.DOCKER_BUILD_DISABLE == 'false'
        uses: docker/setup-buildx-action@v3
        id: builder

      - name: Build and push
        uses: docker/build-push-action@v6
        if: env.DOCKER_BUILD_DISABLE == 'false'
        id: build_push
        continue-on-error: false
        with:
          builder: ${{ steps.builder.outputs.name }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          # ulimit: nofile=1048576:1048576
          platforms: ${{ matrix.platforms || 'linux/amd64,linux/arm64' }}
          context: ${{ matrix.context }}
          file: ${{ matrix.directory }}/${{ matrix.fileName }}
          push: ${{ steps.setup.outputs.DOCKER_BUILD_PUSH_BOOL_STR == 'true' }}
          tags: ${{ env.AZ_REG_NAME }}.azurecr.io/${{ matrix.name }}:${{ env.GIT_BRANCH_NAME }},${{ env.AZ_REG_NAME }}.azurecr.io/${{ matrix.name }}:${{ github.sha }}
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}
          build-args: |
            docker_image_prefix=${{ env.AZ_REG_NAME }}.azurecr.io
            GIT_COMMIT_ARG=${{ github.sha }}

      - name: Prune tagged images before vars.AZ_REG_PRUNE_DAYS_TAGGED
        if: env.AZ_REG_PRUNE_ENABLE_TAGGED == 'true' && env.DOCKER_BUILD_DEBUG == 'true' || env.GIT_BRANCH_NAME == 'develop' || github.event_name == 'workflow_dispatch'
        shell: bash
        continue-on-error: true
        env:
          AZ_REG_PASSWORD: ${{ secrets.AZ_REG_PASSWORD }}
          AZ_REG_REPOSITORY: ${{ matrix.name }}
          AZ_REG_USERNAME: ${{ secrets.AZ_REG_USERNAME }}
        run: |
          if [ ${AZ_REG_PRUNE_DAYS_TAGGED} = 0 ]; then
            AZ_REG_PRUNE_TIMESTAMP=$(date -u -Is)
          else
            TODAY=$(date +%Y-%m-%d)
            AZ_REG_PRUNE_TIMESTAMP="$(date -d "$TODAY - ${AZ_REG_PRUNE_DAYS_TAGGED} days" +%Y-%m-%d)"
          fi
          echo AZ_REG_PRUNE_TIMESTAMP=$AZ_REG_PRUNE_TIMESTAMP

          echo ". 1 - GET manifest metadata"
          az acr manifest list-metadata --only-show-errors --name ${AZ_REG_REPOSITORY} --registry ${AZ_REG_NAME} --username "${AZ_REG_USERNAME}" --password "${AZ_REG_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${AZ_REG_PRUNE_TIMESTAMP}' && not_null(tags)]" > private-manifests-start.json
          wc -l private-manifests-start.json

          echo ". 2 - ANALYZE each tag as deletable True/False"
          cat private-manifests-start.json | yq -rP 'map({"digest":.digest, "tags":(.tags|@json),"count":(.tags|length),"lengths":([.tags[]|length]|@json),"deletable":(.tags|map(test(env(AZ_REG_WHITELIST_REGEX))|not)|@json),"deleteEnabled":.changeableAttributes.deleteEnabled})' | tee private1-analysis.yml

          echo ". 3 - SELECT images to be deleted i.e. manifests excepting deletable False i.e. tags not matching RegEx"
          cat private1-analysis.yml | yq 'map(select(.deletable|contains("false")|not))' > private2-todelete.yml
          echo . INFO for deletion
          cat private2-todelete.yml | yq -P 'map({ "digest": .digest, "tags":.tags | @jsond })'

          if [ "${AZ_REG_PRUNE_DELETE_TAGGED}" = true ]; then
            echo ". 4 - ACTION delete tagged digests ..."
            yq '.[].digest' private2-todelete.yml | sort -u | xargs -I% az acr repository delete -u ${AZ_REG_USERNAME} -p ${AZ_REG_PASSWORD} --name ${AZ_REG_NAME} --image ${AZ_REG_REPOSITORY}@% --yes
          else
            echo ". 4 - SKIPPED delete digests ..."
          fi

      - name: Prune untagged images before vars.AZ_REG_PRUNE_DAYS_UNTAGGED
        shell: bash
        continue-on-error: true
        env:
          AZ_REG_PASSWORD: ${{ secrets.AZ_REG_PASSWORD }}
          AZ_REG_REPOSITORY: ${{ matrix.name }}
          AZ_REG_USERNAME: ${{ secrets.AZ_REG_USERNAME }}
        run: |
          if [ ${AZ_REG_PRUNE_DAYS_UNTAGGED} = 0 ]; then
            AZ_REG_PRUNE_TIMESTAMP=$(date -u -Is)
          else
            TODAY=$(date +%Y-%m-%d)
            AZ_REG_PRUNE_TIMESTAMP="$(date -d "$TODAY - ${AZ_REG_PRUNE_DAYS_UNTAGGED} days" +%Y-%m-%d)"
          fi
          echo AZ_REG_PRUNE_TIMESTAMP=$AZ_REG_PRUNE_TIMESTAMP

          echo . INFO for deletion - untagged
          az acr manifest list-metadata --only-show-errors --registry ${AZ_REG_NAME} --name ${AZ_REG_REPOSITORY} --username "${AZ_REG_USERNAME}" --password "${AZ_REG_PASSWORD}" --orderby time_asc --query "[?lastUpdateTime < '${AZ_REG_PRUNE_TIMESTAMP}' && tags[0]==null]" -o json > private-untagged.json
          cat private-untagged.json | yq -P

          if [ "${AZ_REG_PRUNE_DELETE_UNTAGGED}" = true ]; then
            echo ". ACTION delete untagged digests ..."
            cat private-untagged.json | yq '.[].digest' | xargs -I% az acr repository delete -n ${AZ_REG_NAME} --username "${AZ_REG_USERNAME}" --password "${AZ_REG_PASSWORD}" -t ${AZ_REG_REPOSITORY}@% -y
          else
            echo ". 5 - SKIPPED delete digests ..."
          fi

      - name: Show tagged manfests
        if: env.DOCKER_BUILD_DEBUG == 'true'
        env:
          AZ_REG_PASSWORD: ${{ secrets.AZ_REG_PASSWORD }}
          AZ_REG_REPOSITORY: ${{ matrix.name }}
          AZ_REG_USERNAME: ${{ secrets.AZ_REG_USERNAME }}
          JSON_FILE: private-manifests-end.json
        run: |
          az acr manifest list-metadata --only-show-errors --registry ${AZ_REG_NAME} --name ${AZ_REG_REPOSITORY} --username "${AZ_REG_USERNAME}" --password "${AZ_REG_PASSWORD}" --orderby time_asc --query "[?tags[0]!=null]" -o json > $JSON_FILE
          echo . INFO show full manifests
          cat $JSON_FILE | yq -P
          echo . INFO show all tags
          cat $JSON_FILE | yq -P 'map({ "digest": .digest, "tags":.tags})'
          echo . INFO show tags matching RegEx
          cat $JSON_FILE | yq -P -o tsv '.[].tags | map(select(test(env(AZ_REG_WHITELIST_REGEX))))' | sort
