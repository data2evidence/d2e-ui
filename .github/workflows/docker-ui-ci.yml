name: Build Docker Image

on:
  workflow_dispatch:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
  push:
    branches:
      - develop

# Run only one job per branch
concurrency: 
  group: ${{ github.head_ref || github.ref_name }}-docker-ui-ci # per branch build
  cancel-in-progress: ${{ (github.head_ref || github.ref_name) != 'develop' }} # except for develop branch

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name}}

jobs:
  build-docker-ui:
    environment: development
    runs-on: ubuntu-20.04
    if: github.ref_name == 'develop' || github.event_name == 'workflow_dispatch' || contains('release', ${{ github.head_ref || github.ref_name }}) || ( github.event_name == 'pull_request' && !github.event.pull_request.draft ) # runs if PR is not draft /or/ workflow_dispatch /or/ release branch
    strategy:
      matrix:
        include:
          - name: alp-data-node/alp-local-ui-file-server
            directory: .
            context: .
            fileName: Dockerfile
            platforms: linux/amd64

    steps:
    - uses: actions/checkout@v4

    - name: Get docker tag name
      id: docker_tag
      shell: bash
      run: |
          echo BRANCH_NAME=$BRANCH_NAME
          if [ $BRANCH_NAME = "develop" ]; then
            echo "is_push=true" >> $GITHUB_OUTPUT
          elif [ $GITHUB_EVENT_NAME = "workflow_dispatch" ]; then
            echo "is_push=true" >> $GITHUB_OUTPUT
          else
            echo "is_push=false" >> $GITHUB_OUTPUT
          fi

    - uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_STARBOARD_WRAP }}
            ${{ secrets.SSH_PRIVATE_KEY_NOTEBOOK_BASE }}

    - name: Login to ACR
      uses: docker/login-action@v3.1.0
      with:
        registry: alpcr.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Collect Git and SSH config files in a directory that is part of the Docker build context
      run: |
        cp -r ~/.gitconfig  ~/.ssh .github/
        cd .github/
        sed 's|/home/runner|/root|g' -i.bak .ssh/config

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      id: builder

    - name: Build and push
      uses: docker/build-push-action@v5.3.0
      id: build_push
      continue-on-error: false
      with:
        builder: ${{ steps.builder.outputs.name }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        ulimit: nofile=1048576:1048576
        platforms: ${{ matrix.platforms || 'linux/amd64,linux/arm64' }}
        context: ${{ matrix.context }}
        file:  ${{ matrix.directory }}/${{ matrix.fileName }}
        push: ${{ steps.docker_tag.outputs.is_push }}
        tags: alpcr.azurecr.io/${{ matrix.name }}:${{ env.BRANCH_NAME }},alpcr.azurecr.io/${{ matrix.name }}:${{ github.sha }}
        ssh: |
          default=${{ env.SSH_AUTH_SOCK }}
        build-args: |
          docker_image_prefix=alpcr.azurecr.io
          GIT_COMMIT_ARG=${{ github.sha }}
    
    # - name: Delete images older than 14 days
    #   id: delete_old_images
    #   if: false # ${{ github.event_name != 'workflow_dispatch' && github.ref_name == 'develop' }}
    #   shell: bash
    #   env:
    #     REGISTRY: alpcr
    #     REPOSITORY: alp-data-node/alp-local-ui-file-server
    #     AZ_SP__CLIENT_ID: ${{ secrets.AZ__CDN__CLIENT_ID }}
    #     AZ_SP__CLIENT_SECRET: ${{ secrets.AZ__CDN__CLIENT_SECRET }}
    #     AZ_TENANT_NAME: data4life.care
    #     AZ_UI_LOCAL_FILE_SERVER_USERNAME: ${{ secrets.AZ_UI_LOCAL_FILE_SERVER_USERNAME }}
    #     AZ_UI_LOCAL_FILE_SERVER_PASSWORD: ${{ secrets.AZ_UI_LOCAL_FILE_SERVER_PASSWORD }}
    #     AZ__EXCLUDE_DOCKER_TAG__PATTERN: project # TODO: Use another name | only single value.
    #     AZ__ENABLE_DELETE: false # Can enable/disable if needed
    #     NUMBER_OF_DAYS: 14
    #   run: |
    #     TODAY=$(date +%Y-%m-%d)
    #     TWO_WEEKS_AGO="$(date -d "$TODAY - ${NUMBER_OF_DAYS} days" +%Y-%m-%d)"
        
    #     az login --service-principal -u ${AZ_SP__CLIENT_ID} \
    #     -p ${AZ_SP__CLIENT_SECRET} --tenant ${AZ_TENANT_NAME}
        
    #     echo "Listing images if available.."
    #     az acr manifest list-metadata --name ${REPOSITORY} --registry ${REGISTRY} \
    #     --orderby time_asc --query "[?lastUpdateTime < '${TWO_WEEKS_AGO}' && tags[? !(contains(@, '${AZ__EXCLUDE_DOCKER_TAG__PATTERN}'))]]" -u ${AZ_UI_LOCAL_FILE_SERVER_USERNAME} -p ${AZ_UI_LOCAL_FILE_SERVER_PASSWORD}
        
    #     if [ "${AZ__ENABLE_DELETE}" = false ]; then
    #       echo "Images not deleted.."
    #     else
    #       echo "Images to be deleted.."
    #       az acr manifest list-metadata --name ${REPOSITORY} --registry ${REGISTRY} \
    #       --orderby time_asc --query "[?lastUpdateTime < '${TWO_WEEKS_AGO}' && tags[? !(contains(@, '${AZ__EXCLUDE_DOCKER_TAG__PATTERN}'))]].digest" -o tsv -u ${AZ_UI_LOCAL_FILE_SERVER_USERNAME} -p ${AZ_UI_LOCAL_FILE_SERVER_PASSWORD} | xargs -I% az acr repository delete -u ${AZ_UI_LOCAL_FILE_SERVER_USERNAME} -p ${AZ_UI_LOCAL_FILE_SERVER_PASSWORD} --name ${REGISTRY} --image $REPOSITORY@% --yes
    #     fi

